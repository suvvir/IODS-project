arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
lda.fit
plot(lda.fit, col=as.numeric(learning_scaled$cl), dimen=2)
lda.arrows(lda.fit, myscale = 3, col = "#666666")
dim(learning2014)
setwd("~/yhis-kouluhommat/IODS-project")
library(ggplot2)
library(dplyr)
library(GGally)
data <- read.csv("learning2014.csv", header = T)
keep_columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
learning2014 <- select(data, one_of(keep_columns))
dim(learning2014)
str(learning2014)
p <- ggpairs(learning2014, mapping = aes(col=gender, alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
setwd("~/yhis-kouluhommat/IODS-project")
library(ggplot2)
library(dplyr)
library(GGally)
data <- read.csv("learning2014.csv", header = T)
keep_columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
learning2014 <- select(data, one_of(keep_columns))
dim(learning2014)
str(learning2014)
p <- ggpairs(learning2014, mapping = aes(col=gender, alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
p <- ggpairs(learning2014, mapping = aes(col=gender, alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
p <- ggpairs(learning2014, mapping = aes(col=gender, alpha=0.1), lower = list(combo = wrap("facethist", bins = 20)))
p
my_model <- lm(Points ~ attitude + stra + gender, data = learning2014)
summary(my_model)
my_model <- lm(Points ~ attitude + stra + Age, data = learning2014)
summary(my_model)
my_model2 <- lm(Points ~ attitude, data = learning2014)
summary(my_model2)
par(mfrow = c(2,2))
plot(my_model2, which=c(1,2,5))
knitr::opts_chunk$set(echo = TRUE)
setwd("~/yhis-kouluhommat/IODS-project")
library(ggplot2)
library(dplyr)
library(GGally)
library(MASS)
data("Boston")
data(Boston)
data(Boston)
data(Boston)
str(Boston)
summary(Boston)
gather(data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
setwd("~/yhis-kouluhommat/IODS-project")
library(ggplot2)
library(dplyr)
library(GGally)
library(MASS)
library(tidyr)
library(boot)
gather(data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits=2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type="upper", cl.pos = "b", tl.pos = "d",tl.cex = 0.6)
setwd("~/yhis-kouluhommat/IODS-project")
library(ggplot2)
library(dplyr)
library(GGally)
library(MASS)
library(tidyr)
library(boot)
library(corrplot)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits=2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type="upper", cl.pos = "b", tl.pos = "d",tl.cex = 0.6)
# center and standardize variables
boston_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label=labels)
# class of the boston_scaled object
class(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label=labels)
# class of the boston_scaled object
class(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
labels <- c("low","med_low","med_high","high")
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label=labels)
# look at the table of the new factor crime
table(crime)
# class of the boston_scaled object
class(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
labels <- c("low","med_low","med_high","high")
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label=labels)
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# linear discriminant analysis
lda.fit <- lda(crime ~., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 3)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
table(correct = correct_classes, predicted = lda.pred$class)
# center and standardize variables
boston_scale <- scale(Boston)
# euclidean distance matrix
dist_eu <- dist(boston_scale)
# look at the summary of the distances
summary(dist_eu)
# k-means clustering
km <-kmeans(boston_scale, centers = 3)
# plot the Boston dataset with clusters
pairs(boston_scale, col = km$cluster)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(boston_scale, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(boston_scale, centers = 2)
# plot the Boston dataset with clusters
pairs(boston_scale, col = km$cluster)
# k-means clustering
km <-kmeans(boston_scale, centers = 2)
summary(km)
# plot the Boston dataset with clusters
pairs(boston_scale, col = km$cluster)
# k-means clustering
km <-kmeans(boston_scale, centers = 2)
# plot the Boston dataset with clusters
pairs(boston_scale, col = km$cluster)
# k-means clustering
km <-kmeans(boston_scale, centers = 2)
# plot the Boston dataset with clusters
pairs(boston_scale, col = km$cluster)
km$size
# k-means clustering
km <-kmeans(boston_scale, centers = 2)
# plot the Boston dataset with clusters
pairs(boston_scale, col = km$cluster)
km$size
center <-km$centers
center
keep_columns <- c("sex","Medu","famrel", "goout", "high_use")
data <- select(alc, one_of(keep_columns))
setwd("~/yhis-kouluhommat/IODS-project")
library(ggplot2)
library(dplyr::select)
setwd("~/yhis-kouluhommat/IODS-project")
library(dplyr)
library(tidyr)
library(ggplot2)
library(boot)
knitr::opts_chunk$set(echo = TRUE)
keep_columns <- c("sex","Medu","famrel", "goout", "high_use")
data <- select(alc, one_of(keep_columns))
alc <- read.csv("alc.csv", header = T)
str(alc)
keep_columns <- c("sex","Medu","famrel", "goout", "high_use")
data <- select(alc, one_of(keep_columns))
str(data)
keep_columns <- c("sex","Medu","famrel", "goout", "high_use")
data <- select(alc, one_of(keep_columns))
str(data)
setwd("~/yhis-kouluhommat/IODS-project")
library(ggplot2)
library(dplyr)
library(GGally)
library(MASS)
library(tidyr)
library(boot)
library(corrplot)
alc <- read.csv("alc.csv", header = T)
str(alc)
keep_columns <- c("sex","Medu","famrel", "goout", "high_use")
data <- select(alc, one_of(keep_columns))
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
summary(hd)
str(hd)
summary(gii)
colnames(hd)
names(hd) <- c("HDI_rank", "country","HDI_raw","life_expct","educ_expct","mean_educ","GNI_raw","GNI_rank")
colnames(hd)
colnames(gii)
names(gii) <- c("GII_rank", "country","GII_raw","MMR","ABR","parliament","female_educ","male_educ","female_work","male_work")
colnames(gii)
gii <- mutate(gii, FMR_educ = female_educ/male_educ
gii <- mutate(gii, FMR_educ = (female_educ/male_educ)
gii <- mutate(gii, FMR_educ = female_educ/male_educ
gii <- mutate(gii, FMR_work = female_work/male_work)
gii <- mutate(gii, FMR_work = female_work/male_work
gii <- mutate(gii, FMR_educ = female_educ/male_educ
gii <- mutate(gii, FMR_work = female_work/male_work
gii <- mutate(gii, FMR_educ = female_educ/male_educ
# define a new column ratio of Female and Male populations with secondary education
gii <- mutate(gii, FMR_work = female_work/male_work
gii <- mutate(gii, FMR_educ = female_educ/male_educ)
gii <- mutate(gii, FMR_work = female_work/male_work)
# access the libraries
library(dplyr)
library(ggplot2)
gii <- mutate(gii, FMR_work = female_work/male_work)
gii <- mutate(gii, FMR_educ = female_educ/male_educ)
human <- inner_join(gii, hd, by = "country")
write.csv(human, file = "human.csv")
# Access the packages dplyr and tidyr
library(dplyr)
library(tidyr)
library(data.table)
# read and explore data
BPRS <- fread('https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt', header = T)
str(BPRS)
summary(BPRS)
RATS <- fread('https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt')
RATS$V1 <- NULL
colnames(RATS) <- c("ID","Group","WD1","WD8","WD15","WD22","WD29","WD36","WD43","WD44","WD50","WD57","WD64")
str(RATS)
glimpse(RATS)
# Wide structure = In the wide format, a subject's/rats repeated measurements will be in a single row, and each response is in a separate column.
# Factor treatment & subject in BPRS
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
# Factor group & id in RATS
RATS$ID <- factor(RATS$ID)
RATS$Group <- factor(RATS$Group)
# Convert BPRS to long form
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks,5,5)))
# Take a glimpse at the BPRSL data
glimpse(BPRSL)
# Convert RATS data to long form
RATSL <- RATS %>%
gather(key = WD, value = Weight, -ID, -Group) %>%
mutate(Time = as.integer(substr(WD,3,4)))
# Glimpse the data
glimpse(RATSL)
library(ggplot2)
library(dplyr)
library(GGally)
library(MASS)
library(tidyr)
library(boot)
library(corrplot)
summary(RATSL)
ggplot(RATSL, aes(x = Time, y = Weight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
scale_y_continuous(name = "Unstandardized weight")
# Standardise the variable Weight
RATSL <- RATSL %>%
group_by(Group) %>%
mutate(stdweight = (Weight - mean(Weight))/sd(Weight) ) %>%
ungroup()
glimpse(RATSL)
# Plot again with the standardised weight
ggplot(RATSL, aes(x = Time, y = stdweight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
scale_y_continuous(name = "standardized weight")
# Number of weeks, baseline (week 0) included
n <- RATSL$Time %>% unique() %>% length()
# Summary data with mean and standard error of rats by Group and Week
RATSS <- RATSL %>%
group_by(Group, Time) %>%
summarise( mean = mean(Weight), se = sd(Weight)/sqrt(n) ) %>%
ungroup()
# Glimpse the data
glimpse(RATSS)
# Plot the mean profiles
ggplot(RATSS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
geom_point(size=3) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8)) +
scale_y_continuous(name = "mean(weight) +/- se(weight)")
# Create a summary data by treatment and subject with mean as the summary variable.
RATSL8S <- RATSL %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Glimpse the data
glimpse(RATSL8S)
# Draw a boxplot of the mean versus treatment
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), time 0-60")
# Confirming statistical significance of mean differences with ANOVA
model <- lm(data=RATSL8S, mean ~ Group)
anova(model)
glimpse(BPRSL)
glimpse(BPRSL)
summary(BPRSL)
glimpse(BPRSL)
# Plot the data
ggplot(RATSL, aes(x = week, y = bprs, group = subject)) + geom_line(aes(linetype = treatment)) + scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 60, 10)) + scale_y_continuous(name = "BPRS score") + theme(legend.position = "top")
# Plot the data
ggplot(RATSL, aes(x = week, y = bprs, group = subject)) + geom_line(aes(linetype = subject)) + scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 60, 10)) + scale_y_continuous(name = "BPRS score") + theme(legend.position = "top")
# Plot the data
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) + geom_line(aes(linetype = treatment)) + scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 60, 10)) + scale_y_continuous(name = "BPRS score") + theme(legend.position = "top")
# Plot the data
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) + geom_line(aes(linetype = treatment)) + scale_x_continuous(name = "Time (weeks)", breaks = seq(0, 5, 10)) + scale_y_continuous(name = "BPRS score") + theme(legend.position = "top")
# Plot the data
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) + geom_line(aes(linetype = treatment)) + scale_x_continuous(name = "Time (weeks)") + scale_y_continuous(name = "BPRS score") + theme(legend.position = "top")
# Plot the data
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) + geom_line() + scale_x_continuous(name = "Time (weeks)") + scale_y_continuous(name = "BPRS score") + theme(legend.position = "top")
# Plot the data
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) + geom_line() + scale_x_continuous(name = "Time (weeks)") + scale_y_continuous(name = "BPRS score") + theme(legend.position = "top")
# Plot the data
# Draw the plot
ggplot(BPRSL, aes(x = week, y = bprs, linetype = subject)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ treatment, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(BPRSL$bprs), max(BPRSL$bprs)))
# Create a summary data by treatment and subject with mean as the summary variable (ignoring baseline week 0).
BPRSL8S <- BPRSL %>%
filter(week > 0) %>%
group_by(treatment, subject) %>%
summarise( mean=mean(bprs) ) %>%
ungroup()
# Create a summary data by treatment and subject with mean as the summary variable (ignoring baseline week 0).
BPRSL8S <- BPRSL %>%
filter(week > 0) %>%
group_by(treatment, subject) %>%
summarise( mean=mean(bprs) ) %>%
ungroup()
BPRSL8S1 <- BPRSL8S %>%
filter(mean < 60)
glimpse(BPRSL8S1)
# Linear regression: ignoring the lognitudinal nature of the data
# create a regression model BPRS_reg
BPRS_reg <- lm(data = BPRSL, bprs ~ week + treatment + week*treatment)
# print out a summary of the model
summary(RATS_reg)
# Linear regression: ignoring the lognitudinal nature of the data
# create a regression model BPRS_reg
BPRS_reg <- lm(data = BPRSL, bprs ~ week + treatment + week*treatment)
# print out a summary of the model
summary(BPRS_reg)
library(ggplot2)
library(dplyr)
library(GGally)
library(MASS)
library(tidyr)
library(boot)
library(corrplot)
library(lme4)
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(RATSL, aes(x = weeks, y = bprs, group = subject)) + geom_line(aes(linetype = treatment)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = weeks, y = bprs, group = subject)) + geom_line(aes(linetype = treatment)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
View(BPRSL)
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = weeks, y = bprs, group = treatment)) + geom_line(aes(linetype = treatment)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = weeks, y = bprs, group = treatment)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = weeks, y = bprs)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = week, y = bprs)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = week, y = bprs)) + geom_line(aes(linetype = treatment)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = week, y = bprs)) + geom_dotplot(aes(linetype = treatment)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = week, y = bprs)) + geom_text(aes(linetype = treatment)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = week, y = bprs)) + geom_text(aes(linetype = treatment, label = cty)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Plot of symptoms against time, ignoring the repeated-measures structure of the data but identifying the group to which each observation belongs.
ggplot(BPRSL, aes(x = week, y = bprs)) + geom_text(aes(linetype = treatment, label = treatment)) + scale_x_continuous(name = "Time (days)") + scale_y_continuous(name = "Weight (grams)") + theme(legend.position = "top")
# Create a random intercept model
BPRS_ref <- lmer(bprs ~ week + treatment + (1 | subject), data = BPRSL, REML = FALSE)
summary(BPRS_ref)
# create a random intercept and random slope model
BPRS_ref1 <- lmer(bprs ~ week + tratment + (week | subject), data = BPRSL, REML = FALSE)
# create a random intercept and random slope model
BPRS_ref1 <- lmer(bprs ~ week + treatment + (week | subject), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref1)
# perform an ANOVA test on the two models
anova(BPRS_ref1, BPRS_ref)
# create a random intercept and random slope model with the interaction
BPRS_ref2 <- lmer(bprs ~ week + treatment + week * treatment + (week | subject), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref2)
# perform an ANOVA test on the two models
anova(BPRS_ref2, BPRS_ref1)
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
# Create a new column fitted to bprSL
mutate(BPRSL, Fitted = Fitted)
# draw the plot of BPRSL with the Fitted values of symptoms
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (weeks)") +
scale_y_continuous(name = "Fitted bprs (score)") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
# Create a new column fitted to bprSL
mutate(BPRSL, Fitted = Fitted)
# draw the plot of BPRSL with the Fitted values of symptoms
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_smooth(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (weeks)") +
scale_y_continuous(name = "Fitted bprs (score)") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref1)
# Create a new column fitted to bprSL
mutate(BPRSL, Fitted = Fitted)
# draw the plot of BPRSL with the Fitted values of symptoms
ggplot(BPRSL, aes(x = week, y = Fitted, group = treatment)) +
geom_smooth(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (weeks)") +
scale_y_continuous(name = "Fitted bprs (score)") +
theme(legend.position = "top")
View(RATSL)
setwd("~/yhis-kouluhommat/IODS-project")
write.csv(RATSL, file = "ratsl.csv")
write.csv(BPRSL, file = "bprsl.csv")
ggplot(RATSL, aes(x = Time, y = Weight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
scale_y_continuous(name = "Unstandardized weight")
